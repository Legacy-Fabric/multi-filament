import org.gradle.util.GradleVersion

plugins {
	id 'java-library'
	id 'java-gradle-plugin'
//	id 'checkstyle'
	id 'maven-publish'
}

group = 'net.legacyfabric'
version = project.multi_filament_version

def ENV = System.getenv()

repositories {
	maven {
		name "Fabric Repository"
		url 'https://maven.fabricmc.net'
	}
	mavenCentral()
	mavenLocal()
}

dependencies {
	implementation "org.ow2.asm:asm:${project.asm_version}"
	implementation "org.ow2.asm:asm-tree:${project.asm_version}"
	implementation "net.fabricmc.unpick:unpick-format-utils:${project.unpick_version}"
	implementation "net.fabricmc:mapping-io:0.4.2"
	implementation "net.fabricmc:fabric-filament:0.6.2"
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
	options.release = 17
}

test {
	useJUnitPlatform()
}

//checkstyle {
//	configFile = file('checkstyle.xml')
//	toolVersion = '10.3.3'
//}

gradlePlugin {
	plugins {
		filament {
			id = 'net.legacyfabric.multifilament'
			implementationClass = 'net.legacyfabric.multifilament.MultiFilamentGradlePlugin'
		}
	}
}

publishing {
	repositories {
		if (ENV.MAVEN_PUBLISH_CREDENTIALS) {
			maven {
				url "https://repo.legacyfabric.net/repository/legacyfabric"
				credentials {
					username ENV.MAVEN_PUBLISH_CREDENTIALS.split(":")[0]
					password ENV.MAVEN_PUBLISH_CREDENTIALS.split(":")[1]
				}
				authentication {
					basic(BasicAuthentication)
				}
			}
		}
	}
}

/**
 * Run this task to download the gradle sources next to the api jar, you may need to manually attach the sources jar
 */
task downloadGradleSources() {
	doLast {
		// Awful hack to find the gradle api location
		def gradleApiFile = project.configurations.detachedConfiguration(dependencies.gradleApi()).files.stream()
			.filter {
				it.name.startsWith("gradle-api")
			}.findFirst().orElseThrow()

		def gradleApiSources = new File(gradleApiFile.absolutePath.replace(".jar", "-sources.jar"))
		def url = "https://services.gradle.org/distributions/gradle-${GradleVersion.current().getVersion()}-src.zip"

		gradleApiSources.delete()

		println("Downloading (${url}) to (${gradleApiSources})")
		gradleApiSources << new URL(url).newInputStream()
	}
}
